diff -u dmenu-3.9.orig/config.h dmenu-3.9/config.h
--- dmenu-3.9.orig/config.h	2008-09-14 18:46:10.000000000 +0200
+++ dmenu-3.9/config.h	2008-09-15 01:15:07.000000000 +0200
@@ -6,4 +6,6 @@
 static const char *normfgcolor = "#000000";
 static const char *selbgcolor  = "#0066ff";
 static const char *selfgcolor  = "#ffffff";
+static const char *lastbgcolor = "#cccccc";
+static const char *lastfgcolor = "#000000";
 static unsigned int spaceitem  = 30; /* px between menu items */
diff -u dmenu-3.9.orig/dmenu.c dmenu-3.9/dmenu.c
--- dmenu-3.9.orig/dmenu.c	2008-09-14 18:46:10.000000000 +0200
+++ dmenu-3.9/dmenu.c	2008-09-15 01:33:26.000000000 +0200
@@ -28,6 +28,7 @@
 	int x, y, w, h;
 	unsigned long norm[ColLast];
 	unsigned long sel[ColLast];
+	unsigned long last[ColLast];
 	Drawable drawable;
 	GC gc;
 	struct {
@@ -48,20 +49,23 @@
 
 /* forward declarations */
 static void appenditem(Item *i, Item **list, Item **last);
-static void calcoffsets(void);
+static void calcoffsetsh(void);
+static void calcoffsetsv(void);
 static char *cistrstr(const char *s, const char *sub);
 static void cleanup(void);
-static void drawmenu(void);
+static void drawmenuh(void);
+static void drawmenuv(void);
 static void drawtext(const char *text, unsigned long col[ColLast]);
 static void eprint(const char *errstr, ...);
 static unsigned long getcolor(const char *colstr);
 static Bool grabkeyboard(void);
 static void initfont(const char *fontstr);
 static void kpress(XKeyEvent * e);
+static void resizewindow(void);
 static void match(char *pattern);
 static void readstdin(void);
 static void run(void);
-static void setup(Bool topbar);
+static void setup(void);
 static int textnw(const char *text, unsigned int len);
 static int textw(const char *text);
 
@@ -70,14 +74,31 @@
 /* variables */
 static char *maxname = NULL;
 static char *prompt = NULL;
+static char *lastitem = NULL; 
 static char text[4096];
+static char hitstxt[16];
+static char nl;
 static int cmdw = 0;
 static int promptw = 0;
 static int ret = 0;
 static int screen;
+static int x, y;
 static unsigned int mw, mh;
 static unsigned int numlockmask = 0;
+static unsigned int hits = 0;
+static unsigned int lines = 3;
+static unsigned int xoffset = 0;
+static unsigned int yoffset = 0;
+static unsigned int width = 0;
+static unsigned int height = 0;
 static Bool running = True;
+static Bool topbar = True;
+static Bool vlist = False;
+static Bool hitcounter = False;
+static Bool alignright = False;
+static Bool multiselect = False;
+static Bool resize = False;
+static Bool marklastitem = False;
 static Display *dpy;
 static DC dc;
 static Item *allitems = NULL;	/* first of all items */
@@ -89,6 +110,8 @@
 static Window root, win;
 static int (*fstrncmp)(const char *, const char *, size_t n) = strncmp;
 static char *(*fstrstr)(const char *, const char *) = strstr;
+static void (*calcoffsets)(void) = calcoffsetsh;
+static void (*drawmenu)(void) = drawmenuh;
 
 void
 appenditem(Item *i, Item **list, Item **last) {
@@ -99,12 +122,13 @@
 	i->left = *last;
 	i->right = NULL;
 	*last = i;
+	++hits;
 }
 
 void
-calcoffsets(void) {
-	int tw;
-	unsigned int w;
+calcoffsetsh(void) {
+	static int tw;
+	static unsigned int w;
 
 	if(!curr)
 		return;
@@ -128,6 +152,26 @@
 	}
 }
 
+void
+calcoffsetsv(void) {
+	static unsigned int w;
+
+	if(!curr)
+		return;
+	w = (dc.font.height + 2) * (lines - 2);
+	for(next = curr; next; next=next->right) {
+		w -= dc.font.height + 2;
+		if(w <= 0)
+			break;
+	}
+	w = (dc.font.height + 2) * (lines - 2);
+	for(prev = curr; prev && prev->left; prev=prev->left) {
+		w -= dc.font.height + 2;
+		if(w <= 0)
+			break;
+	}
+}
+
 char *
 cistrstr(const char *s, const char *sub) {
 	int c, csub;
@@ -172,8 +216,8 @@
 }
 
 void
-drawmenu(void) {
-	Item *i;
+drawmenuh(void) {
+	static Item *i;
 
 	dc.x = 0;
 	dc.y = 0;
@@ -213,6 +257,85 @@
 }
 
 void
+drawmenuv(void) {
+	static Item *i;
+
+	dc.x = 0;
+	dc.y = 0;
+	dc.h = mh;
+	drawtext(NULL, dc.norm);
+	/* print prompt? */
+	if(promptw) {
+		dc.w = promptw;
+		drawtext(prompt, dc.sel);
+	}
+	dc.x += promptw;
+	dc.w = mw - promptw - (hitcounter ? textnw(hitstxt, strlen(hitstxt)) : 0);
+
+	drawtext(text[0] ? text : NULL, dc.norm);
+	if(curr) {
+		if (hitcounter) {
+			dc.w = textw(hitstxt);
+			dc.x = mw - textw(hitstxt);
+			drawtext(hitstxt, dc.norm);
+		}
+		dc.x = 0;
+		dc.y += dc.font.height + 2;
+		dc.w = mw;
+		drawtext((curr && curr->left) ? "^" : NULL, dc.norm);
+		dc.y += dc.font.height + 2;
+		/* determine maximum items */
+		for(i = curr; i != next; i=i->right) {
+			if(marklastitem && lastitem && !strncmp(lastitem, i->text, strlen(i->text)))
+				drawtext(i->text, dc.last);
+			else
+				drawtext(i->text, (sel == i) ? dc.sel : dc.norm);
+			dc.y += dc.font.height + 2;
+		}
+		drawtext(next ? "v" : NULL, dc.norm);
+	} else {
+		if (hitcounter) {
+			dc.w = textw(hitstxt);
+			dc.x = mw - textw(hitstxt);
+			dc.y = 0;
+			drawtext(hitstxt, dc.norm);
+		}
+		dc.x = 0;
+		dc.w = mw;
+		dc.h = mh;
+		dc.y += dc.font.height + 2;
+		drawtext(NULL, dc.norm);
+	}
+	XCopyArea(dpy, dc.drawable, win, dc.gc, 0, 0, mw, mh, 0, 0);
+	XFlush(dpy);
+}
+
+void
+updatemenuv(Bool updown) {
+	static Item *i;
+	
+	if(curr) {
+		dc.x = 0;
+		dc.y = (dc.font.height + 2) * 2;
+		dc.w = mw;
+		dc.h = mh;
+		for(i = curr; i != next; i = i->right) {
+			if(((i == sel->left) && !updown) || (i == sel)
+			||((i == sel->right) && updown)) {
+				if(marklastitem && lastitem && !strncmp(lastitem, i->text, strlen(i->text)))
+						drawtext(i->text, dc.last);
+				else 
+					drawtext(i->text, (sel == i) ? dc.sel : dc.norm);
+				XCopyArea(dpy, dc.drawable, win, dc.gc, dc.x, dc.y,
+					dc.w, dc.font.height + 2, dc.x, dc.y);
+			}
+			dc.y += dc.font.height + 2;
+		}			
+	}
+	XFlush(dpy);
+}
+
+void
 drawtext(const char *text, unsigned long col[ColLast]) {
 	char buf[256];
 	int i, x, y, h, len, olen;
@@ -223,8 +346,8 @@
 	if(!text)
 		return;
 	olen = strlen(text);
-	h = dc.font.ascent + dc.font.descent;
-	y = dc.y + (dc.h / 2) - (h / 2) + dc.font.ascent;
+	h = dc.font.height;
+	y = dc.y + ((h + 2) / 2) - (h / 2) + dc.font.ascent;
 	x = dc.x + (h / 2);
 	/* shorten text if necessary */
 	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
@@ -430,12 +553,21 @@
 		calcoffsets();
 		break;
 	case XK_Left:
+	case XK_Up:
 		if(!(sel && sel->left))
 			return;
 		sel=sel->left;
 		if(sel->right == curr) {
-			curr = prev;
+			if (vlist)
+				curr = curr->left;
+			else
+				curr = prev;
 			calcoffsets();
+		} else {
+			if (vlist) {
+				updatemenuv(True);
+				return;
+			}
 		}
 		break;
 	case XK_Next:
@@ -452,21 +584,32 @@
 		break;
 	case XK_Return:
 		if((e->state & ShiftMask) && *text)
-			fprintf(stdout, "%s", text);
-		else if(sel)
-			fprintf(stdout, "%s", sel->text);
+			fprintf(stdout, "%s%c", text, nl);
+		else if(sel) {
+			fprintf(stdout, "%s%c", sel->text, nl);
+			lastitem = sel->text;
+		}
 		else if(*text)
-			fprintf(stdout, "%s", text);
+			fprintf(stdout, "%s%c", text, nl);
 		fflush(stdout);
-		running = False;
+		running = multiselect;
 		break;
 	case XK_Right:
+	case XK_Down:
 		if(!(sel && sel->right))
 			return;
 		sel=sel->right;
 		if(sel == next) {
-			curr = next;
+			if (vlist)
+				curr = curr->right;
+			else
+				curr = next;
 			calcoffsets();
+		} else {
+			if (vlist) {
+				updatemenuv(False);
+				return;
+			}
 		}
 		break;
 	case XK_Tab:
@@ -479,6 +622,18 @@
 	drawmenu();
 }
 
+void resizewindow(void)
+{
+	if (resize) {
+		static int rlines, ry, rmh;
+	
+		rlines = hits + 3 > lines ? lines : hits + 3;
+		rmh = vlist ? (dc.font.height + 2) * rlines : mh;
+		ry = topbar ? y + yoffset : y - rmh + (dc.font.height + 2) - yoffset;
+		XMoveResizeWindow(dpy, win, x, ry, mw, rmh);
+	}
+}
+
 void
 match(char *pattern) {
 	unsigned int plen;
@@ -518,6 +673,9 @@
 	}
 	curr = prev = next = sel = item;
 	calcoffsets();
+	resizewindow();
+	snprintf(hitstxt, sizeof(hitstxt), "(%d)", hits);
+	hits = 0;
 }
 
 void
@@ -569,8 +727,8 @@
 }
 
 void
-setup(Bool topbar) {
-	int i, j, x, y;
+setup(void) {
+	int i, j, sy;
 #if XINERAMA
 	int n;
 	XineramaScreenInfo *info = NULL;
@@ -593,6 +751,8 @@
 	dc.norm[ColFG] = getcolor(normfgcolor);
 	dc.sel[ColBG] = getcolor(selbgcolor);
 	dc.sel[ColFG] = getcolor(selfgcolor);
+	dc.last[ColBG] = getcolor(lastbgcolor);
+	dc.last[ColFG] = getcolor(lastfgcolor);
 	initfont(font);
 
 	/* menu window */
@@ -627,7 +787,15 @@
 		mw = DisplayWidth(dpy, screen);
 	}
 
-	win = XCreateWindow(dpy, root, x, y, mw, mh, 0,
+	/* update menu window geometry */
+	
+	lines = height ? height / (dc.font.height + 2) : lines;
+	mh = vlist ? (dc.font.height + 2) * lines : mh;
+	sy = topbar ? y + yoffset : y - mh + (dc.font.height + 2) - yoffset;
+	x = alignright ? mw - (width ? width : mw) - xoffset : xoffset;
+	mw = width ? width : mw;
+
+	win = XCreateWindow(dpy, root, x, sy, mw, mh, 0,
 			DefaultDepth(dpy, screen), CopyFromParent,
 			DefaultVisual(dpy, screen),
 			CWOverrideRedirect | CWBackPixmap | CWEventMask, &wa);
@@ -670,7 +838,6 @@
 int
 main(int argc, char *argv[]) {
 	unsigned int i;
-	Bool topbar = True;
 
 	/* command line args */
 	for(i = 1; i < argc; i++)
@@ -680,6 +847,16 @@
 		}
 		else if(!strcmp(argv[i], "-b"))
 			topbar = False;
+		else if(!strcmp(argv[i], "-r"))
+			alignright = True;
+		else if(!strcmp(argv[i], "-l")) {
+			vlist = True;
+			calcoffsets = calcoffsetsv;
+			drawmenu = drawmenuv;
+			if(++i < argc) lines += atoi(argv[i]);
+		}
+		else if(!strcmp(argv[i], "-c"))
+			hitcounter = True;
 		else if(!strcmp(argv[i], "-fn")) {
 			if(++i < argc) font = argv[i];
 		}
@@ -698,11 +875,43 @@
 		else if(!strcmp(argv[i], "-sf")) {
 			if(++i < argc) selfgcolor = argv[i];
 		}
+		else if(!strcmp(argv[i], "-lb")) {
+			if(++i < argc) lastbgcolor = argv[i];
+		}
+		else if(!strcmp(argv[i], "-lf")) {
+			if(++i < argc) lastfgcolor = argv[i];
+		}
+		else if(!strcmp(argv[i], "-w")) {
+			if(++i < argc) width = atoi(argv[i]);
+		}
+		else if(!strcmp(argv[i], "-h")) {
+			vlist = True;
+			calcoffsets = calcoffsetsv;
+			drawmenu = drawmenuv;
+			if(++i < argc) height = atoi(argv[i]);
+		}
+		else if(!strcmp(argv[i], "-x")) {
+			if(++i < argc) xoffset = atoi(argv[i]);
+		}
+		else if(!strcmp(argv[i], "-y")) {
+			if(++i < argc) yoffset = atoi(argv[i]);
+		}
+		else if(!strcmp(argv[i], "-nl"))
+			nl = '\n';
+		else if(!strcmp(argv[i], "-rs"))
+			resize = True;
+		else if(!strcmp(argv[i], "-ms"))
+			multiselect = True;
+		else if(!strcmp(argv[i], "-ml"))
+			marklastitem = True;
 		else if(!strcmp(argv[i], "-v"))
 			eprint("dmenu-"VERSION", © 2006-2008 dmenu engineers, see LICENSE for details\n");
 		else
-			eprint("usage: dmenu [-i] [-b] [-fn <font>] [-nb <color>] [-nf <color>]\n"
-			       "             [-p <prompt>] [-sb <color>] [-sf <color>] [-v]\n");
+			eprint("usage: dmenu [-i] [-b] [-r] [-l <#items>] [-c] [-fn <font>] [-nb <color>]\n"
+			       "[-nf <color>] [-p <prompt>] [-sb <color>] [-sf <color>] [-lb <color>]\n"
+			       "[-lf <color>] [-w <width>] [-h <height>] [-x <xoffset>] [-y <yoffset>]\n"
+			       "[-nl] [-rs] [-ms] [-ml] [-v]\n");
+
 	if(!setlocale(LC_CTYPE, "") || !XSupportsLocale())
 		fprintf(stderr, "warning: no locale support\n");
 	if(!(dpy = XOpenDisplay(0)))
@@ -718,8 +927,8 @@
 		running = grabkeyboard();
 		readstdin();
 	}
-
-	setup(topbar);
+	
+	setup();
 	drawmenu();
 	XSync(dpy, False);
 	run();
