diff -Nur dmenu-4.0orig/config.h dmenu-4.0/config.h
--- dmenu-4.0orig/config.h	2009-04-18 19:50:04.000000000 +0800
+++ dmenu-4.0/config.h	2009-05-13 10:54:38.881741262 +0800
@@ -1,7 +1,7 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const char *font        = "-*-terminus-medium-r-normal-*-14-*-*-*-*-*-*-*";
+static const char *font        = "Droid Sans Mono-10";
 static const char *normbgcolor = "#cccccc";
 static const char *normfgcolor = "#000000";
 static const char *selbgcolor  = "#0066ff";
diff -Nur dmenu-4.0orig/config.mk dmenu-4.0/config.mk
--- dmenu-4.0orig/config.mk	2009-04-18 19:50:04.000000000 +0800
+++ dmenu-4.0/config.mk	2009-05-13 10:48:01.901768301 +0800
@@ -15,8 +15,8 @@
 XINERAMAFLAGS = -DXINERAMA
 
 # includes and libs
-INCS = -I. -I/usr/include -I${X11INC}
-LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 ${XINERAMALIBS}
+INCS = -I. -I/usr/include -I${X11INC}  `pkg-config --cflags xft`
+LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 ${XINERAMALIBS}  `pkg-config --libs xft` 
 
 # flags
 CPPFLAGS = -D_BSD_SOURCE -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff -Nur dmenu-4.0orig/dmenu.c dmenu-4.0/dmenu.c
--- dmenu-4.0orig/dmenu.c	2009-04-18 19:50:04.000000000 +0800
+++ dmenu-4.0/dmenu.c	2009-05-13 11:17:25.248730753 +0800
@@ -8,6 +8,7 @@
 #include <strings.h>
 #include <unistd.h>
 #include <X11/keysym.h>
+#include <X11/Xft/Xft.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #ifdef XINERAMA
@@ -27,14 +28,16 @@
 	int x, y, w, h;
 	unsigned long norm[ColLast];
 	unsigned long sel[ColLast];
+        XftColor *xftnorm;
+        XftColor *xftsel;
 	Drawable drawable;
+	XftDraw *xftdrawable;
 	GC gc;
 	struct {
-		XFontStruct *xfont;
-		XFontSet set;
-		int ascent;
-		int descent;
+                XftFont *xftfont;
+                XGlyphInfo *extents;
 		int height;
+		int width;
 	} font;
 } DC; /* draw context */
 
@@ -160,10 +163,6 @@
 		free(allitems);
 		allitems = itm;
 	}
-	if(dc.font.set)
-		XFreeFontSet(dpy, dc.font.set);
-	else
-		XFreeFont(dpy, dc.font.xfont);
 	XFreePixmap(dpy, dc.drawable);
 	XFreeGC(dpy, dc.gc);
 	XDestroyWindow(dpy, win);
@@ -222,21 +221,22 @@
 	if(!text)
 		return;
 	olen = strlen(text);
-	h = dc.font.ascent + dc.font.descent;
-	y = dc.y + (dc.h / 2) - (h / 2) + dc.font.ascent;
-	x = dc.x + (h / 2);
+        h = dc.font.height;
+        y = mh/2 + h/2;
+        x = dc.x+h/2;
+        /*      h = dc.font.ascent + dc.font.descent;
+                y = dc.y + (dc.h / 2) - (h / 2) + dc.font.ascent;
+                x = dc.x + (h / 2);*/
 	/* shorten text if necessary */
-	for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
+        for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w; len--);
+        //for(len = MIN(olen, sizeof buf); len && textnw(text, len) > dc.w - h; len--);
 	if(!len)
 		return;
 	memcpy(buf, text, len);
 	if(len < olen)
 		for(i = len; i && i > len - 3; buf[--i] = '.');
 	XSetForeground(dpy, dc.gc, col[ColFG]);
-	if(dc.font.set)
-		XmbDrawString(dpy, dc.drawable, dc.font.set, dc.gc, x, y, buf, len);
-	else
-		XDrawString(dpy, dc.drawable, dc.gc, x, y, buf, len);
+	XftDrawStringUtf8(dc.xftdrawable, (col==dc.norm) ? dc.xftnorm : dc.xftsel ,dc.font.xftfont,x,y-2,(FcChar8 *)buf,len);
 }
 
 void
@@ -274,12 +274,12 @@
 
 void
 initfont(const char *fontstr) {
-	char *def, **missing;
-	int i, n;
+  //char *def, **missing;
+  //int i, n;
 
 	if(!fontstr || fontstr[0] == '\0')
 		eprint("error, cannot load font: '%s'\n", fontstr);
-	missing = NULL;
+	/*missing = NULL;
 	dc.font.set = XCreateFontSet(dpy, fontstr, &missing, &n, &def);
 	if(missing)
 		XFreeStringList(missing);
@@ -305,7 +305,17 @@
 		dc.font.ascent = dc.font.xfont->ascent;
 		dc.font.descent = dc.font.xfont->descent;
 	}
-	dc.font.height = dc.font.ascent + dc.font.descent;
+        dc.font.height = dc.font.ascent + dc.font.descent;*/
+     dc.font.xftfont = XftFontOpenXlfd(dpy,screen,fontstr);
+     if(!dc.font.xftfont)
+          dc.font.xftfont = XftFontOpenName(dpy,screen,fontstr);
+     if(!dc.font.xftfont)
+        eprint("error, cannot load font: '%s'\n", fontstr);
+     dc.font.extents = malloc(sizeof(XGlyphInfo));
+     XftTextExtentsUtf8(dpy,dc.font.xftfont,(FcChar8 *)fontstr, strlen(fontstr), dc.font.extents);
+     dc.font.height = dc.font.extents->y+dc.font.extents->yOff;
+     dc.font.width = (dc.font.extents->width)/strlen(fontstr);
+
 }
 
 void
@@ -585,10 +595,13 @@
 	XFreeModifiermap(modmap);
 
 	/* style */
-	dc.norm[ColBG] = getcolor(normbgcolor);
-	dc.norm[ColFG] = getcolor(normfgcolor);
-	dc.sel[ColBG] = getcolor(selbgcolor);
-	dc.sel[ColFG] = getcolor(selfgcolor);
+	dc.xftsel=malloc(sizeof(XftColor));
+	dc.xftnorm=malloc(sizeof(XftColor));
+	XftColorAllocName(dpy,DefaultVisual(dpy,screen),DefaultColormap(dpy,screen),selfgcolor, dc.xftsel);
+	XftColorAllocName(dpy,DefaultVisual(dpy,screen),DefaultColormap(dpy,screen),normfgcolor, dc.xftnorm);
+	if(!dc.xftsel || !dc.xftnorm)
+	  eprint("error, cannot allocate color\n");
+	
 	initfont(font);
 
 	/* menu window */
@@ -597,7 +610,9 @@
 	wa.event_mask = ExposureMask | ButtonPressMask | KeyPressMask;
 
 	/* menu window geometry */
-	mh = dc.font.height + 2;
+	mh = dc.font.extents->y+dc.font.extents->height - 1;
+	//mh = dc.font.height + 2;
+
 #if XINERAMA
 	if(XineramaIsActive(dpy) && (info = XineramaQueryScreens(dpy, &n))) {
 		i = 0;
@@ -632,8 +647,9 @@
 	dc.drawable = XCreatePixmap(dpy, root, mw, mh, DefaultDepth(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
-	if(!dc.font.set)
-		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
+	dc.xftdrawable = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy,screen),DefaultColormap(dpy,screen));
+	if(!dc.xftdrawable)
+	  eprint("error, cannot create drawable\n");
 	if(maxname)
 		cmdw = textw(maxname);
 	if(cmdw > mw / 3)
@@ -649,18 +665,15 @@
 
 int
 textnw(const char *text, unsigned int len) {
-	XRectangle r;
-
-	if(dc.font.set) {
-		XmbTextExtents(dc.font.set, text, len, NULL, &r);
-		return r.width;
-	}
-	return XTextWidth(dc.font.xfont, text, len);
+        XftTextExtentsUtf8(dpy,dc.font.xftfont,(FcChar8 *)text, strlen(text), dc.font.extents);
+        if(dc.font.extents->height > dc.font.height)
+          dc.font.height = dc.font.extents->height;
+	return dc.font.extents->width;
 }
 
 int
 textw(const char *text) {
-	return textnw(text, strlen(text)) + dc.font.height;
+	return textnw(text, strlen(text)) + 2*dc.font.width;
 }
 
 int
